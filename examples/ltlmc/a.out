#!/usr/bin/env perl
use strict;
use warnings;

use File::Spec::Functions qw(catfile);
use File::Temp;
use File::Copy;
use MIME::Base64;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError) ;

setpgrp;

# We trap control-c (and others) so we can clean up when that happens.
$SIG{'ABRT'} = 'interruptHandler';
$SIG{'TERM'} = 'interruptHandler';
$SIG{'QUIT'} = 'interruptHandler';
$SIG{'SEGV'} = 'interruptHandler';
$SIG{'HUP' } = 'interruptHandler';
$SIG{'TRAP'} = 'interruptHandler';
$SIG{'STOP'} = 'interruptHandler';
$SIG{'INT'} = 'interruptHandler'; # handle control-c 

# Set heap size of krun
$ENV{K_OPTS} = '-Xmx2048m';

# These are compile-time settings and are set by the compile script using this
# file as a template.
my $SCRIPTS_DIR = "/home/dexter/Desktop/c-semantics-3.4.0/dist";
my $PROGRAM_NAME = "patch.c";

my $EXEC_DEF = catfile($SCRIPTS_DIR, "c11-kompiled");
my $EXEC_ND_DEF = catfile($SCRIPTS_DIR, "c11-nd-kompiled");
my $EXEC_ND_THREAD_DEF = catfile($SCRIPTS_DIR, "c11-nd-thread-kompiled");

my $KRUN = "krun";

my @temporaryFiles = ();

exit main();

sub main {
      my $fileInput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-in-XXXXXXXXXXX', 
            SUFFIX => '.bin', 
            UNLINK => 0);
      my $fileOutput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-out-XXXXXXXXXXX', 
            SUFFIX => '.txt', 
            UNLINK => 0);

      push(@temporaryFiles, $fileInput);
      push(@temporaryFiles, $fileOutput);

      # The function "linkedProgram()" is attached to the bottom of this script
      # by kcc.
      binmode($fileInput, ':raw');

      my $gzippedConf = decode_base64(linkedProgram());
      my $gunzippedConf;

      gunzip \$gzippedConf => \$gunzippedConf
            or die "gunzip failed: $GunzipError\n";

      print $fileInput $gunzippedConf;

      my $argc = $#ARGV + 2;
      my $argv = join('  ', map {qq|ListItem(\\"$_\\")|} ($0, @ARGV));

      my %krun_args = (
                  '--output' => 'pretty', 
                  '--output-file' => $fileOutput, 
                  '-d' => $EXEC_DEF,
                  '--io' => 'on', 
                  "-cARGC=$argc" => '',
                  "-cARGV=\"($argv .List)\"" => '',
                  '--load-cfg' => $fileInput
                  );

      my @options = ();

      if (defined $ENV{HELP}) {
            print "Here are some configuration variables you can set to affect how this program is run:\n";
            print "DEBUG --- runs krun with the --debug flag.\n";
     #       print "SEARCH --- searches for all possible behaviors instead of interpreting.\n";
            print "UPSEARCH --- searches for all possible behaviors related to update instead of intepreting.\n";
            print "THREADSEARCH --- searches for all possible behaviors related to concurrency instead of interpreting.\n";
            print "PROFILE --- performs semantic profiling using this program.\n";
            print "GRAPH --- to be used with SEARCH=1; generates a graph of the state space.\n";
            print "TRACE --- runs krun with the --trace flag.\n";
            print "DUMPALL --- leaves all the intermediate files in the current directory.\n";
            print "LOGIO --- tell the IO server to create logs.\n";
            print "LTLMC --- LTL model checking.\n";
	    print "UPLTLMC --- LTL model checking for update. \n";
            print "VERBOSE --- verbose output.\n";
            print "E.g., DEBUG=1 $0\n";
            print "\n";
            print "This message was displayed because the variable HELP was set.  Use HELP=1 $0 to turn off.\n";
            return 1;
      }

      if (defined $ENV{PROFILE} && defined $ENV{TRACE}) {
            print STDERR "Error: Cannot use both PROFILE and TRACE at the same time.\n";
            return 1;
      }

      # Set the arguments to krun based on the value of environment variables.
      if (defined $ENV{PROFILE}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--profile'} = '';
      }

      if (defined $ENV{TRACE}) {
            $krun_args{'--trace'} = '';
      }

      if (defined $ENV{LOGIO}) {
            $krun_args{'--log-io'} = 'on';
      }

      if (defined $ENV{DEBUG}) {
            $krun_args{'--debug'} = '';
      }

      if (defined $ENV{VERBOSE}) {
            $krun_args{'--verbose'} = '';
      }

      if (defined $ENV{SEARCH}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic expression sequencing)\n";
      }

      if (defined $ENV{UPSEARCH} ){
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic update)\n";
      }

      if (defined $ENV{THREADSEARCH}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_THREAD_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic thread interleaving)\n";
      }

      if (defined $ENV{LTLMC}) {
            $krun_args{'--ltlmc'} = $ENV{LTLMC};
            $krun_args{'-d'} = $EXEC_ND_DEF;
            $krun_args{'--output'} = 'pretty';
            push @options, 'NOIO';
            print 'LTL model checking... ';
            print "(with non-deterministic expression sequencing)\n";
	    
      }

      if (defined $ENV{UPLTLMC}) {
	    $krun_args{'--ltlmc'} = $ENV{LTLMC};
            $krun_args{'-d'} = $EXEC_ND_DEF;
            $krun_args{'--output'} = 'pretty';
            push @options, 'NOIO';
            delete $krun_args{'--output-file'};
            print 'LTL model checking for update... ';
            print "(with non-deterministic update)\n";
      }

      @options = map {"SetItem($_)"} @options;
      push @options, ".Set";
      $krun_args{'-cOPTIONS="(' . (join ' ', @options) . ')"'} = '';

      # Execute krun with the arguments in (flattened) %krun_args.
      my $cmd = "$KRUN " . (join ' ', (grep {$_} %krun_args));
      print $cmd . "\n" if defined $ENV{VERBOSE};
      system($cmd);

      # Print errors and/or results and exit.
      if (defined $ENV{PROFILE}) {
            my $profileDB = 'kccProfileDB.sqlite';
            print "Generating profile database $profileDB...\n";
            if (! -e $profileDB) {
                  copy(catfile($SCRIPTS_DIR, "kccProfileDB.calibration.sqlite"), 
                              $profileDB);
            }
            my $profileWrapper = catfile($SCRIPTS_DIR, 'analyzeProfile.pl');
            `perl $profileWrapper $fileOutput $PROGRAM_NAME`;
            return 0;
      } 

      if (defined $ENV{SEARCH} || defined $ENV{THREADSEARCH} || defined $ENV{UPSEARCH}) 
      {
            my $graphOutputFile = "kcc-search-results.dot";

            print "Generated $fileOutput\n" if defined $ENV{VERBOSE};
            print "Examining the output...\n" if defined $ENV{VERBOSE};
            my $graphOutput = graphSearch($graphOutputFile, $fileOutput);
            print "$graphOutput\n";
            print "Generated $graphOutputFile.\n";

            if (defined $ENV{GRAPH}) {
                  print "Generating graph...\n";
                  system("dot -Tps2 $graphOutputFile > kcc-search-results.ps") == 0 
                        or die "Running dot failed: $?\n";
                  print "Generated kcc-search-results.ps.\n";
                  system("ps2pdf kcc-search-results.ps kcc-search-results.pdf") == 0 
                        or die "Running ps2pdf failed: $?\n";
                  print "Generated kcc-search-results.pdf\n";
            }
            return 0;
      } 

      if (defined $ENV{LTLMC} | defined $ENV{DEBUG} | defined $ENV{UPLTLMC}) {
	    print "the result is save to $fileOutput \n";
            return 0;
      }

      return processResult($fileOutput, defined $ENV{VERBOSE});
}

sub parseRawResultLine {
      my ($parsed) = (@_);

      /< k > (.*) <\/ k >/ && do {
            $parsed->{finalComp} = $1;
      };

      /< error-cell > # "(.*)"\(\.KList\) <\/ error-cell >/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /< curr-function > 'Identifier\(# "(.*)"\(\.KList\)\) <\/ curr-function >/ && do {
            $parsed->{errorFunc} = $1;
      };

      /< curr-program-loc > 'CabsLoc\(# "(.*)"\(\.KList\),,# (\d+).*<\/ curr-program-loc >/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /< final-computation > (.*) <\/ final-computation >/ && do {
            $parsed->{finalComp} = $1;
      };

      /< computation > (.*) <\/ computation >/ && do {
            $parsed->{finalCompGoto} = $1;
      };

      /< type > (.*) <\/ type >/ && do {
            $parsed->{finalCompType} = $1;
      };

      /< output > #buffer\(# "(.*)"\(\.KList\)\) <\/ output >/ && do {
            $parsed->{output} = $1;
      };

      /< done > (.*) <\/ done >/s && do {
	     push @{$parsed->{done}},$1;
      }; 

      /< update-line > 'CabsLoc\(# "(.*)"\(\.KList\),,# (\d+).*<\/ update-line >/ && do {
            $parsed->{updateLine} = $2;
      };

      /< result-value > 'tv\(# (-?\d+)\(\.KList\),,/ && do {
            $parsed->{exitCode} = $1;
      };
}

# TODO(chathhorn): We have two functions here because of the newlines -- the
# regexes below match against the whole file as opposed to a line at a time.
sub parseResult {
      my ($parsed) = (@_);

      /<k>(.*?)<\/k>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<error-cell>\s*"(.*)"\s*<\/error-cell>/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /<curr-function>\s*(Identifier \( "(.*?)" \)|(file-scope))\s*<\/curr-function>/ && do {
            $parsed->{errorFunc} = $2;
      };

      /<curr-program-loc>\s*CabsLoc\s*\(\s*"(.*)"\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*<\/curr-program-loc>/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /<final-computation>(.*?)<\/final-computation>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<computation>(.*?)<\/computation>/s && do {
            $parsed->{finalCompGoto} = $1;
      };

      /<type>(.*?)<\/type>/s && do {
            $parsed->{finalCompType} = $1;
      };

      /<output>\s*#buffer\s*\(\s*"(.*)"\s*\)\s*<\/output>/ && do {
            $parsed->{output} = $1;
      };

      /<result-value>\s*tv\s*\(\s*(-?\d+)\s*,/ && do {
            $parsed->{exitCode} = $1;
      };

      /< done > (.*) <\/ done >/s && do {
	     push @{$parsed->{done}},$1;
      }; 

      /<update-line>\s*CabsLoc\s*\(\s*"(.*)"\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*<\/update-line>/ && do {
            $parsed->{updateLine} = $2;
      };

      /<result-value>\s*tv\s*\(\s*NullPointer\s*,/ && do {
            $parsed->{exitCode} = 0;
      };
}

sub unindent {
      my ($str) = (@_);

      my @lines = split "\n", $str;

      for (@lines) {
            s/^\s+//;
      }

      return join "\n", @lines;
}

sub processResult {
      my ($fileOutput, $verbose) = (@_);
      my %parsed;

      open(OUT, "<$fileOutput");
      local $/;
      local $_ = <OUT>;
      print if $verbose;
      parseResult(\%parsed);

      if (defined $parsed{finalComp} || defined $parsed{finalCompType} 
                  || defined $parsed{errorMsg} || !defined $parsed{exitCode}) {
            print "\n=============================================================\n";
            print "ERROR! KCC encountered an error while executing this program.\n";

            if (defined $parsed{errorMsg}) {
                  print "=============================================================\n";
                  print "$parsed{errorMsg}\n";
            }

            print "=============================================================\n";
            print "File: $parsed{errorFile}\n" if defined $parsed{errorFile};
            print "Function: $parsed{errorFunc}\n" if defined $parsed{errorFunc};
            print "Line: $parsed{errorLine}\n" if defined $parsed{errorLine};

            if (defined $parsed{finalComp}) {
                  print "=============================================================\n";
                  print "Final Computation:\n";
                  print unindent(substr($parsed{finalComp}, 0, 1000));
                  print "\n";
            }

            if (defined $parsed{finalCompGoto}) {
                  print "=============================================================\n";
                  print "Final Goto Map Computation:\n";
                  print unindent(substr($parsed{finalCompGoto}, 0, 1000));
                  print "\n";
            }

            if (defined $parsed{finalCompType}) {
                  print "=============================================================\n";
                  print "Final Type Computation:\n";
                  print unindent(substr($parsed{finalCompType}, 0, 1000));
                  print "\n";
            }
      }
      return $parsed{exitCode} if defined $parsed{exitCode};
      return 1;
}

sub graphSearch {
      require GraphViz;

      my %states = (); # stateId => stateLabel
            my %arcs = (); # startArcId => endArcId => arcLabel
            my %errorStates = (); # stateId => errorKind
            my %goodFinal = (); # stateId => ""

            my ($outFilename, $inFilename) = (@_);
      my $retval = "";

      my $g = GraphViz->new();

# Literal braces, vertical bars and angle brackets must be escaped.

      my $state = "start";
      my $currentStateNumber;
      my $currentStateDestination;
      my $currentState = "";
      my $currentRule = "";
      my $currentRuleName;
      my @currentArc;

      my $seenMain = 0;

      my @solutions;

      open(IN, "<$inFilename");

      for (<IN>) {
            chomp;

            # handle start state
            if ($state eq "start") {
                  /^Solution (\d+) / && do {
                        $state = "solution";
                  };

                  /^No solution\./ && do {
                        $state = "state";
                  };
            }

            if ($state eq "solution") {
                  /^Solution (\d+) / && do {
                        my $numSolutions = $1;
                        push(@solutions, {});
                        $solutions[-1]->{'num'} = $numSolutions;
                  };

                  parseRawResultLine($solutions[-1]);

                  # keep reading (and throwing away) until we hit a state
                  /^state (\d+)/ && do {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                  };

                  next;
            }

            # handle state state
            if ($state eq "state") {
                  # keep reading until we hit an arc
                  if (/^arc (\d+) ===> state (\d+) \((c?rl) /) {
                        $state = "arc";
                        # meant to continue to next case
                  } elsif (/^state (\d+)/) {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                        next;
                  } else {
                        $currentState .= $_;
                        /"stdout"\(\.KList\) \|-> # "(.*)"\(\.KList\)/ && do {
                              my $currentOutput = $1;
                              $states{$currentStateNumber} = $currentOutput;
                        };

                        /< output > #buffer\(# "(.*)"\(\.KList\)\) <\/ output >/ && do {
                              my $currentOutput = $1;
                              $goodFinal{$currentStateNumber} = "";
                              $states{$currentStateNumber} = $currentOutput;
                        };

                        /< error-cell > (.*) <\/ error-cell >/ && do {
                              my $currentOutput = $1;
                              $errorStates{$currentStateNumber} = "";
                        };
                        next;
                  }
            }

            # handle arc state
            if ($state eq "arc") {
                  # keep reading until we hit a state or arc
                  if (/^state (\d+)/) {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                  } elsif (/^arc (\d+) ===> state (\d+) \((c?rl) /) {
                        my $arcNumber = $1;
                        $currentStateDestination = $2;
                        $currentRule = $3;
                        if ($seenMain) {
                              $arcs{$currentStateNumber}{$currentStateDestination} = "";
                        }
                        $state = "arc";
                        $currentRuleName = "";
                  } else {
                        $currentRule .= $_;

                        /label ([\w-]+).*\] \.\)$/ && do {
                              $currentRuleName = $1;
                              if ($currentRuleName eq "call-main") {
                                    %states = ();
                                    $seenMain = 1; 
                              }
                              if ($seenMain) {
                                    $arcs{$currentStateNumber}{$currentStateDestination} = $currentRuleName;
                              }
                        };

                        /metadata .*heating/ && do {
                              if (/freezer\("\(([^\)]+)\)\./) {
                                    $currentRuleName = $1;
                        }
                        $currentRuleName .= ' heat';
                        if ($seenMain) {
                              $arcs{$currentStateNumber}{$currentStateDestination} = $currentRuleName;
                        }
                        };
                  }
                  next;
            }
      }

      for my $node (keys %states) {
            my $attribs = getAttribs($node, \%errorStates, \%goodFinal);
            $attribs->{'label'} = "$node\n${states{$node}}";
            $g->add_node($node, %$attribs);
      }

      for my $from (keys %arcs) {
            for my $to (keys %{$arcs{$from}}) {
                  $g->add_edge($from => $to, label => $arcs{$from}{$to});
            }
      }

      open(DOTOUTPUT, ">$outFilename");
      print DOTOUTPUT $g->as_text;
      close(DOTOUTPUT);

      $retval .= "========================================================================\n";
      $retval .= scalar(@solutions) . " solutions found\n"; 
      for my $solution (@solutions) {

            $retval .= "------------------------------------------------------------------------\n";
            $retval .= "Solution $solution->{'num'}\n";
            if (defined $solution->{'exitCode'}) {
                  $retval .= "Program completed successfully\n"; 
                  $retval .= "Exit code: " . getString($solution->{'exitCode'}) . "\n";
            } else {
                  $retval .= "Program got stuck\n";
                  $retval .= "File: " . getString($solution->{'errorFile'}) . "\n";
                  $retval .= "Line: " . getString($solution->{'errorLine'}) . "\n";
            }
            if (defined $solution->{'errorMsg'}) {
                  $retval .= getString($solution->{'errorMsg'}) . "\n";
            }
	    $retval .= "Update at Line:" . getString($solution->{'updateLine'}) . "\n";
	    $retval .= "Output:\n";
	    my $donevalue ;
	    foreach $donevalue (@{$solution->{'done'}}){
	    $retval .=  $donevalue;
	    $retval .=  "\n";}
#           $retval .= "Output:\n" . getString($solution->{'output'}) . "\n";

      }
      $retval .= "========================================================================\n";
      $retval .= scalar(@solutions) . " solutions found\n"; 

      return $retval;
}

sub getAttribs {
      my ($nodeId, $errorStates, $goodFinal) = (@_);
      my $attribs = {};
      if (exists($errorStates->{$nodeId})) {
            $attribs->{"fillcolor"} = "red";
            $attribs->{"style"} = "filled";
      }
      if (exists($goodFinal->{$nodeId})) {
            $attribs->{"fillcolor"} = "green";
            $attribs->{"style"} = "filled";
      }
      return $attribs;
}

sub getString {
      my ($s) = (@_);

      return '' unless defined $s;

      $s =~ s/\%/\%\%/g;
      $s =~ s/\\\\/\\\\\\\\/g;
      return substr(`printf "x$s"`, 1);
}

sub interruptHandler {
      # Call single cleanup point.
      finalCleanup();
      kill 1, -$$;
      # Since we were interrupted, we should exit with a non-zero code.
      exit 1;
}

# This subroutine can be used as a way to ensure we clean up all resources
# whenever we exit. This is going to be mostly temp files. If the program
# terminates for almost any reason, this code will be executed.
sub finalCleanup {
      if (!defined $ENV{DUMPALL}) {
            for (@temporaryFiles) {
                  close $_;
                  unlink;
            }
      }
}

# This block gets run at the end of a normally terminating program, whether it
# simply exits, or dies. We use this to clean up.
END {
      # $? contains the value the program would normally have exited with.
      my $retval = $?;
      # Call single cleanup point.
      finalCleanup();
      exit $retval;
}

# The parsed file contents of the program to execute with krun gets appended.

sub linkedProgram {
return <<'PROGRAMCONF';
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

PROGRAMCONF
}
