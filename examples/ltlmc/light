#!/usr/bin/env perl
use strict;
use warnings;

use File::Spec::Functions qw(catfile);
use File::Temp;
use File::Copy;
use MIME::Base64;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError) ;

setpgrp;

# We trap control-c (and others) so we can clean up when that happens.
$SIG{'ABRT'} = 'interruptHandler';
$SIG{'TERM'} = 'interruptHandler';
$SIG{'QUIT'} = 'interruptHandler';
$SIG{'SEGV'} = 'interruptHandler';
$SIG{'HUP' } = 'interruptHandler';
$SIG{'TRAP'} = 'interruptHandler';
$SIG{'STOP'} = 'interruptHandler';
$SIG{'INT'} = 'interruptHandler'; # handle control-c 

# Set heap size of krun
$ENV{K_OPTS} = '-Xmx2048m';

# These are compile-time settings and are set by the compile script using this
# file as a template.
my $SCRIPTS_DIR = "/home/dexter/Desktop/c-semantics-3.4.0/dist";
my $PROGRAM_NAME = "lights.c";

my $EXEC_DEF = catfile($SCRIPTS_DIR, "c11-kompiled");
my $EXEC_ND_DEF = catfile($SCRIPTS_DIR, "c11-nd-kompiled");
my $EXEC_ND_THREAD_DEF = catfile($SCRIPTS_DIR, "c11-nd-thread-kompiled");

my $KRUN = "krun";

my @temporaryFiles = ();

exit main();

sub main {
      my $fileInput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-in-XXXXXXXXXXX', 
            SUFFIX => '.bin', 
            UNLINK => 0);
      my $fileOutput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-out-XXXXXXXXXXX', 
            SUFFIX => '.txt', 
            UNLINK => 0);

      push(@temporaryFiles, $fileInput);
      push(@temporaryFiles, $fileOutput);

      # The function "linkedProgram()" is attached to the bottom of this script
      # by kcc.
      binmode($fileInput, ':raw');

      my $gzippedConf = decode_base64(linkedProgram());
      my $gunzippedConf;

      gunzip \$gzippedConf => \$gunzippedConf
            or die "gunzip failed: $GunzipError\n";

      print $fileInput $gunzippedConf;

      my $argc = $#ARGV + 2;
      my $argv = join('  ', map {qq|ListItem(\\"$_\\")|} ($0, @ARGV));

      my %krun_args = (
                  '--output' => 'pretty', 
                  '--output-file' => $fileOutput, 
                  '-d' => $EXEC_DEF,
                  '--io' => 'on', 
                  "-cARGC=$argc" => '',
                  "-cARGV=\"($argv .List)\"" => '',
                  '--load-cfg' => $fileInput
                  );

      my @options = ();

      if (defined $ENV{HELP}) {
            print "Here are some configuration variables you can set to affect how this program is run:\n";
            print "DEBUG --- runs krun with the --debug flag.\n";
     #       print "SEARCH --- searches for all possible behaviors instead of interpreting.\n";
            print "UPSEARCH --- searches for all possible behaviors related to update instead of intepreting.\n";
            print "THREADSEARCH --- searches for all possible behaviors related to concurrency instead of interpreting.\n";
            print "PROFILE --- performs semantic profiling using this program.\n";
            print "GRAPH --- to be used with SEARCH=1; generates a graph of the state space.\n";
            print "TRACE --- runs krun with the --trace flag.\n";
            print "DUMPALL --- leaves all the intermediate files in the current directory.\n";
            print "LOGIO --- tell the IO server to create logs.\n";
            print "LTLMC --- LTL model checking.\n";
	    print "UPLTLMC --- LTL model checking for update. \n";
            print "VERBOSE --- verbose output.\n";
            print "E.g., DEBUG=1 $0\n";
            print "\n";
            print "This message was displayed because the variable HELP was set.  Use HELP=1 $0 to turn off.\n";
            return 1;
      }

      if (defined $ENV{PROFILE} && defined $ENV{TRACE}) {
            print STDERR "Error: Cannot use both PROFILE and TRACE at the same time.\n";
            return 1;
      }

      # Set the arguments to krun based on the value of environment variables.
      if (defined $ENV{PROFILE}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--profile'} = '';
      }

      if (defined $ENV{TRACE}) {
            $krun_args{'--trace'} = '';
      }

      if (defined $ENV{LOGIO}) {
            $krun_args{'--log-io'} = 'on';
      }

      if (defined $ENV{DEBUG}) {
            $krun_args{'--debug'} = '';
      }

      if (defined $ENV{VERBOSE}) {
            $krun_args{'--verbose'} = '';
      }

      if (defined $ENV{SEARCH}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic expression sequencing)\n";
      }

      if (defined $ENV{UPSEARCH} ){
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic update)\n";
      }

      if (defined $ENV{THREADSEARCH}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_THREAD_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic thread interleaving)\n";
      }

      if (defined $ENV{LTLMC}) {
            $krun_args{'--ltlmc'} = $ENV{LTLMC};
            $krun_args{'-d'} = $EXEC_ND_DEF;
            $krun_args{'--output'} = 'pretty';
            push @options, 'NOIO';
           # delete $krun_args{'--output-file'};
           # print 'LTL model checking... ';
           # print "(with non-deterministic expression sequencing)\n";
            print 'LTL model checking for update... ';
            print "(with non-deterministic update)\n";
	    print "the result content is saved to $fileOutput\n";
      }

      if (defined $ENV{UPLTLMC}) {
	    $krun_args{'--ltlmc'} = $ENV{UPLTLMC};
            $krun_args{'-d'} = $EXEC_ND_DEF;
            $krun_args{'--output'} = 'pretty';
            push @options, 'NOIO';
            print 'LTL model checking for update... ';
            print "(with non-deterministic update)\n";
	    print "the result content is saved to $fileOutput\n";
      }

      @options = map {"SetItem($_)"} @options;
      push @options, ".Set";
      $krun_args{'-cOPTIONS="(' . (join ' ', @options) . ')"'} = '';

      # Execute krun with the arguments in (flattened) %krun_args.
      my $cmd = "$KRUN " . (join ' ', (grep {$_} %krun_args));
      print $cmd . "\n" if defined $ENV{VERBOSE};
      system($cmd);

      # Print errors and/or results and exit.
      if (defined $ENV{PROFILE}) {
            my $profileDB = 'kccProfileDB.sqlite';
            print "Generating profile database $profileDB...\n";
            if (! -e $profileDB) {
                  copy(catfile($SCRIPTS_DIR, "kccProfileDB.calibration.sqlite"), 
                              $profileDB);
            }
            my $profileWrapper = catfile($SCRIPTS_DIR, 'analyzeProfile.pl');
            `perl $profileWrapper $fileOutput $PROGRAM_NAME`;
            return 0;
      } 

      if (defined $ENV{SEARCH} || defined $ENV{THREADSEARCH} || defined $ENV{UPSEARCH}) 
      {
            my $graphOutputFile = "kcc-search-results.dot";

            print "Generated $fileOutput\n" if defined $ENV{VERBOSE};
            print "Examining the output...\n" if defined $ENV{VERBOSE};
            my $graphOutput = graphSearch($graphOutputFile, $fileOutput);
            print "$graphOutput\n";
            print "Generated $graphOutputFile.\n";

            if (defined $ENV{GRAPH}) {
                  print "Generating graph...\n";
                  system("dot -Tps2 $graphOutputFile > kcc-search-results.ps") == 0 
                        or die "Running dot failed: $?\n";
                  print "Generated kcc-search-results.ps.\n";
                  system("ps2pdf kcc-search-results.ps kcc-search-results.pdf") == 0 
                        or die "Running ps2pdf failed: $?\n";
                  print "Generated kcc-search-results.pdf\n";
            }
            return 0;
      } 

      if (defined $ENV{LTLMC} | defined $ENV{DEBUG} | defined $ENV{UPLTLMC}) {
            return 0;
      }

      return processResult($fileOutput, defined $ENV{VERBOSE});
}

sub parseRawResultLine {
      my ($parsed) = (@_);

      /< k > (.*) <\/ k >/ && do {
            $parsed->{finalComp} = $1;
      };

      /< error-cell > # "(.*)"\(\.KList\) <\/ error-cell >/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /< curr-function > 'Identifier\(# "(.*)"\(\.KList\)\) <\/ curr-function >/ && do {
            $parsed->{errorFunc} = $1;
      };

      /< curr-program-loc > 'CabsLoc\(# "(.*)"\(\.KList\),,# (\d+).*<\/ curr-program-loc >/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /< final-computation > (.*) <\/ final-computation >/ && do {
            $parsed->{finalComp} = $1;
      };

      /< computation > (.*) <\/ computation >/ && do {
            $parsed->{finalCompGoto} = $1;
      };

      /< type > (.*) <\/ type >/ && do {
            $parsed->{finalCompType} = $1;
      };

      /< output > #buffer\(# "(.*)"\(\.KList\)\) <\/ output >/ && do {
            $parsed->{output} = $1;
      };

      /< done > (.*) <\/ done >/s && do {
	     push @{$parsed->{done}},$1;
      }; 

      /< update-line > 'CabsLoc\(# "(.*)"\(\.KList\),,# (\d+).*<\/ update-line >/ && do {
            $parsed->{updateLine} = $2;
      };

      /< result-value > 'tv\(# (-?\d+)\(\.KList\),,/ && do {
            $parsed->{exitCode} = $1;
      };
}

# TODO(chathhorn): We have two functions here because of the newlines -- the
# regexes below match against the whole file as opposed to a line at a time.
sub parseResult {
      my ($parsed) = (@_);

      /<k>(.*?)<\/k>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<error-cell>\s*"(.*)"\s*<\/error-cell>/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /<curr-function>\s*(Identifier \( "(.*?)" \)|(file-scope))\s*<\/curr-function>/ && do {
            $parsed->{errorFunc} = $2;
      };

      /<curr-program-loc>\s*CabsLoc\s*\(\s*"(.*)"\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*<\/curr-program-loc>/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /<final-computation>(.*?)<\/final-computation>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<computation>(.*?)<\/computation>/s && do {
            $parsed->{finalCompGoto} = $1;
      };

      /<type>(.*?)<\/type>/s && do {
            $parsed->{finalCompType} = $1;
      };

      /<output>\s*#buffer\s*\(\s*"(.*)"\s*\)\s*<\/output>/ && do {
            $parsed->{output} = $1;
      };

      /<result-value>\s*tv\s*\(\s*(-?\d+)\s*,/ && do {
            $parsed->{exitCode} = $1;
      };

      /< done > (.*) <\/ done >/s && do {
	     push @{$parsed->{done}},$1;
      }; 

      /<update-line>\s*CabsLoc\s*\(\s*"(.*)"\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*<\/update-line>/ && do {
            $parsed->{updateLine} = $2;
      };

      /<result-value>\s*tv\s*\(\s*NullPointer\s*,/ && do {
            $parsed->{exitCode} = 0;
      };
}

sub unindent {
      my ($str) = (@_);

      my @lines = split "\n", $str;

      for (@lines) {
            s/^\s+//;
      }

      return join "\n", @lines;
}

sub processResult {
      my ($fileOutput, $verbose) = (@_);
      my %parsed;

      open(OUT, "<$fileOutput");
      local $/;
      local $_ = <OUT>;
      print if $verbose;
      parseResult(\%parsed);

      if (defined $parsed{finalComp} || defined $parsed{finalCompType} 
                  || defined $parsed{errorMsg} || !defined $parsed{exitCode}) {
            print "\n=============================================================\n";
            print "ERROR! KCC encountered an error while executing this program.\n";

            if (defined $parsed{errorMsg}) {
                  print "=============================================================\n";
                  print "$parsed{errorMsg}\n";
            }

            print "=============================================================\n";
            print "File: $parsed{errorFile}\n" if defined $parsed{errorFile};
            print "Function: $parsed{errorFunc}\n" if defined $parsed{errorFunc};
            print "Line: $parsed{errorLine}\n" if defined $parsed{errorLine};

            if (defined $parsed{finalComp}) {
                  print "=============================================================\n";
                  print "Final Computation:\n";
                  print unindent(substr($parsed{finalComp}, 0, 1000));
                  print "\n";
            }

            if (defined $parsed{finalCompGoto}) {
                  print "=============================================================\n";
                  print "Final Goto Map Computation:\n";
                  print unindent(substr($parsed{finalCompGoto}, 0, 1000));
                  print "\n";
            }

            if (defined $parsed{finalCompType}) {
                  print "=============================================================\n";
                  print "Final Type Computation:\n";
                  print unindent(substr($parsed{finalCompType}, 0, 1000));
                  print "\n";
            }
      }
      return $parsed{exitCode} if defined $parsed{exitCode};
      return 1;
}

sub graphSearch {
      require GraphViz;

      my %states = (); # stateId => stateLabel
            my %arcs = (); # startArcId => endArcId => arcLabel
            my %errorStates = (); # stateId => errorKind
            my %goodFinal = (); # stateId => ""

            my ($outFilename, $inFilename) = (@_);
      my $retval = "";

      my $g = GraphViz->new();

# Literal braces, vertical bars and angle brackets must be escaped.

      my $state = "start";
      my $currentStateNumber;
      my $currentStateDestination;
      my $currentState = "";
      my $currentRule = "";
      my $currentRuleName;
      my @currentArc;

      my $seenMain = 0;

      my @solutions;

      open(IN, "<$inFilename");

      for (<IN>) {
            chomp;

            # handle start state
            if ($state eq "start") {
                  /^Solution (\d+) / && do {
                        $state = "solution";
                  };

                  /^No solution\./ && do {
                        $state = "state";
                  };
            }

            if ($state eq "solution") {
                  /^Solution (\d+) / && do {
                        my $numSolutions = $1;
                        push(@solutions, {});
                        $solutions[-1]->{'num'} = $numSolutions;
                  };

                  parseRawResultLine($solutions[-1]);

                  # keep reading (and throwing away) until we hit a state
                  /^state (\d+)/ && do {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                  };

                  next;
            }

            # handle state state
            if ($state eq "state") {
                  # keep reading until we hit an arc
                  if (/^arc (\d+) ===> state (\d+) \((c?rl) /) {
                        $state = "arc";
                        # meant to continue to next case
                  } elsif (/^state (\d+)/) {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                        next;
                  } else {
                        $currentState .= $_;
                        /"stdout"\(\.KList\) \|-> # "(.*)"\(\.KList\)/ && do {
                              my $currentOutput = $1;
                              $states{$currentStateNumber} = $currentOutput;
                        };

                        /< output > #buffer\(# "(.*)"\(\.KList\)\) <\/ output >/ && do {
                              my $currentOutput = $1;
                              $goodFinal{$currentStateNumber} = "";
                              $states{$currentStateNumber} = $currentOutput;
                        };

                        /< error-cell > (.*) <\/ error-cell >/ && do {
                              my $currentOutput = $1;
                              $errorStates{$currentStateNumber} = "";
                        };
                        next;
                  }
            }

            # handle arc state
            if ($state eq "arc") {
                  # keep reading until we hit a state or arc
                  if (/^state (\d+)/) {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                  } elsif (/^arc (\d+) ===> state (\d+) \((c?rl) /) {
                        my $arcNumber = $1;
                        $currentStateDestination = $2;
                        $currentRule = $3;
                        if ($seenMain) {
                              $arcs{$currentStateNumber}{$currentStateDestination} = "";
                        }
                        $state = "arc";
                        $currentRuleName = "";
                  } else {
                        $currentRule .= $_;

                        /label ([\w-]+).*\] \.\)$/ && do {
                              $currentRuleName = $1;
                              if ($currentRuleName eq "call-main") {
                                    %states = ();
                                    $seenMain = 1; 
                              }
                              if ($seenMain) {
                                    $arcs{$currentStateNumber}{$currentStateDestination} = $currentRuleName;
                              }
                        };

                        /metadata .*heating/ && do {
                              if (/freezer\("\(([^\)]+)\)\./) {
                                    $currentRuleName = $1;
                        }
                        $currentRuleName .= ' heat';
                        if ($seenMain) {
                              $arcs{$currentStateNumber}{$currentStateDestination} = $currentRuleName;
                        }
                        };
                  }
                  next;
            }
      }

      for my $node (keys %states) {
            my $attribs = getAttribs($node, \%errorStates, \%goodFinal);
            $attribs->{'label'} = "$node\n${states{$node}}";
            $g->add_node($node, %$attribs);
      }

      for my $from (keys %arcs) {
            for my $to (keys %{$arcs{$from}}) {
                  $g->add_edge($from => $to, label => $arcs{$from}{$to});
            }
      }

      open(DOTOUTPUT, ">$outFilename");
      print DOTOUTPUT $g->as_text;
      close(DOTOUTPUT);

      $retval .= "========================================================================\n";
      $retval .= scalar(@solutions) . " solutions found\n"; 
      for my $solution (@solutions) {

            $retval .= "------------------------------------------------------------------------\n";
            $retval .= "Solution $solution->{'num'}\n";
            if (defined $solution->{'exitCode'}) {
                  $retval .= "Program completed successfully\n"; 
                  $retval .= "Exit code: " . getString($solution->{'exitCode'}) . "\n";
            } else {
                  $retval .= "Program got stuck\n";
                  $retval .= "File: " . getString($solution->{'errorFile'}) . "\n";
                  $retval .= "Line: " . getString($solution->{'errorLine'}) . "\n";
            }
            if (defined $solution->{'errorMsg'}) {
                  $retval .= getString($solution->{'errorMsg'}) . "\n";
            }
	    $retval .= "Update at Line:" . getString($solution->{'updateLine'}) . "\n";
	    $retval .= "Output:\n";
	    my $donevalue ;
	    foreach $donevalue (@{$solution->{'done'}}){
	    $retval .=  $donevalue;
	    $retval .=  "\n";}
#           $retval .= "Output:\n" . getString($solution->{'output'}) . "\n";

      }
      $retval .= "========================================================================\n";
      $retval .= scalar(@solutions) . " solutions found\n"; 

      return $retval;
}

sub getAttribs {
      my ($nodeId, $errorStates, $goodFinal) = (@_);
      my $attribs = {};
      if (exists($errorStates->{$nodeId})) {
            $attribs->{"fillcolor"} = "red";
            $attribs->{"style"} = "filled";
      }
      if (exists($goodFinal->{$nodeId})) {
            $attribs->{"fillcolor"} = "green";
            $attribs->{"style"} = "filled";
      }
      return $attribs;
}

sub getString {
      my ($s) = (@_);

      return '' unless defined $s;

      $s =~ s/\%/\%\%/g;
      $s =~ s/\\\\/\\\\\\\\/g;
      return substr(`printf "x$s"`, 1);
}

sub interruptHandler {
      # Call single cleanup point.
      finalCleanup();
      kill 1, -$$;
      # Since we were interrupted, we should exit with a non-zero code.
      exit 1;
}

# This subroutine can be used as a way to ensure we clean up all resources
# whenever we exit. This is going to be mostly temp files. If the program
# terminates for almost any reason, this code will be executed.
sub finalCleanup {
      if (!defined $ENV{DUMPALL}) {
            for (@temporaryFiles) {
                  close $_;
                  unlink;
            }
      }
}

# This block gets run at the end of a normally terminating program, whether it
# simply exits, or dies. We use this to clean up.
END {
      # $? contains the value the program would normally have exited with.
      my $retval = $?;
      # Call single cleanup point.
      finalCleanup();
      exit $retval;
}

# The parsed file contents of the program to execute with krun gets appended.

sub linkedProgram {
return <<'PROGRAMCONF';
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

PROGRAMCONF
}
