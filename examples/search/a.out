#!/usr/bin/env perl
use strict;
use warnings;

use File::Spec::Functions qw(catfile);
use File::Temp;
use File::Copy;
use MIME::Base64;
use IO::Uncompress::Gunzip qw(gunzip $GunzipError) ;

setpgrp;

# We trap control-c (and others) so we can clean up when that happens.
$SIG{'ABRT'} = 'interruptHandler';
$SIG{'TERM'} = 'interruptHandler';
$SIG{'QUIT'} = 'interruptHandler';
$SIG{'SEGV'} = 'interruptHandler';
$SIG{'HUP' } = 'interruptHandler';
$SIG{'TRAP'} = 'interruptHandler';
$SIG{'STOP'} = 'interruptHandler';
$SIG{'INT'} = 'interruptHandler'; # handle control-c 

# Set heap size of krun
$ENV{K_OPTS} = '-Xmx2048m';

# These are compile-time settings and are set by the compile script using this
# file as a template.
my $SCRIPTS_DIR = "/home/dexter/Desktop/c-semantics-3.4.0/dist";
my $PROGRAM_NAME = "undefAdd.c";

my $EXEC_DEF = catfile($SCRIPTS_DIR, "c11-kompiled");
my $EXEC_ND_DEF = catfile($SCRIPTS_DIR, "c11-nd-kompiled");
my $EXEC_ND_THREAD_DEF = catfile($SCRIPTS_DIR, "c11-nd-thread-kompiled");

my $KRUN = "krun";

my @temporaryFiles = ();

exit main();

sub main {
      my $fileInput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-in-XXXXXXXXXXX', 
            SUFFIX => '.bin', 
            UNLINK => 0);
      my $fileOutput = File::Temp->new(
            TEMPLATE => 'tmp-kcc-out-XXXXXXXXXXX', 
            SUFFIX => '.txt', 
            UNLINK => 0);

      push(@temporaryFiles, $fileInput);
      push(@temporaryFiles, $fileOutput);

      # The function "linkedProgram()" is attached to the bottom of this script
      # by kcc.
      binmode($fileInput, ':raw');

      my $gzippedConf = decode_base64(linkedProgram());
      my $gunzippedConf;

      gunzip \$gzippedConf => \$gunzippedConf
            or die "gunzip failed: $GunzipError\n";

      print $fileInput $gunzippedConf;

      my $argc = $#ARGV + 2;
      my $argv = join('  ', map {qq|ListItem(\\"$_\\")|} ($0, @ARGV));

      my %krun_args = (
                  '--output' => 'pretty', 
                  '--output-file' => $fileOutput, 
                  '-d' => $EXEC_DEF,
                  '--io' => 'on', 
                  "-cARGC=$argc" => '',
                  "-cARGV=\"($argv .List)\"" => '',
                  '--load-cfg' => $fileInput
                  );

      my @options = ();

      if (defined $ENV{HELP}) {
            print "Here are some configuration variables you can set to affect how this program is run:\n";
            print "DEBUG --- runs krun with the --debug flag.\n";
     #       print "SEARCH --- searches for all possible behaviors instead of interpreting.\n";
            print "UPSEARCH --- searches for all possible behaviors related to update instead of intepreting.\n";
            print "THREADSEARCH --- searches for all possible behaviors related to concurrency instead of interpreting.\n";
            print "PROFILE --- performs semantic profiling using this program.\n";
            print "GRAPH --- to be used with SEARCH=1; generates a graph of the state space.\n";
            print "TRACE --- runs krun with the --trace flag.\n";
            print "DUMPALL --- leaves all the intermediate files in the current directory.\n";
            print "LOGIO --- tell the IO server to create logs.\n";
            print "LTLMC --- LTL model checking.\n";
	    print "UPLTLMC --- LTL model checking for update. \n";
            print "VERBOSE --- verbose output.\n";
            print "E.g., DEBUG=1 $0\n";
            print "\n";
            print "This message was displayed because the variable HELP was set.  Use HELP=1 $0 to turn off.\n";
            return 1;
      }

      if (defined $ENV{PROFILE} && defined $ENV{TRACE}) {
            print STDERR "Error: Cannot use both PROFILE and TRACE at the same time.\n";
            return 1;
      }

      # Set the arguments to krun based on the value of environment variables.
      if (defined $ENV{PROFILE}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--profile'} = '';
      }

      if (defined $ENV{TRACE}) {
            $krun_args{'--trace'} = '';
      }

      if (defined $ENV{LOGIO}) {
            $krun_args{'--log-io'} = 'on';
      }

      if (defined $ENV{DEBUG}) {
            $krun_args{'--debug'} = '';
      }

      if (defined $ENV{VERBOSE}) {
            $krun_args{'--verbose'} = '';
      }

      if (defined $ENV{SEARCH}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic expression sequencing)\n";
      }

      if (defined $ENV{UPSEARCH} ){
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic update)\n";
      }

      if (defined $ENV{THREADSEARCH}) {
            $krun_args{'--output'} = 'raw';
            $krun_args{'--search-final'} = '';
            push @options, 'NOIO';
            $krun_args{'-d'} = $EXEC_ND_THREAD_DEF;
            print 'Searching reachable states... ';
            print "(with non-deterministic thread interleaving)\n";
      }

      if (defined $ENV{LTLMC}) {
            $krun_args{'--ltlmc'} = $ENV{LTLMC};
            $krun_args{'-d'} = $EXEC_ND_DEF;
            $krun_args{'--output'} = 'pretty';
            push @options, 'NOIO';
            delete $krun_args{'--output-file'};
            print 'LTL model checking... ';
            print "(with non-deterministic expression sequencing)\n";
      }

      if (defined $ENV{UPLTLMC}) {
	    $krun_args{'--ltlmc'} = $ENV{LTLMC};
            $krun_args{'-d'} = $EXEC_ND_DEF;
            $krun_args{'--output'} = 'pretty';
            push @options, 'NOIO';
            delete $krun_args{'--output-file'};
            print 'LTL model checking for update... ';
            print "(with non-deterministic update)\n";
      }

      @options = map {"SetItem($_)"} @options;
      push @options, ".Set";
      $krun_args{'-cOPTIONS="(' . (join ' ', @options) . ')"'} = '';

      # Execute krun with the arguments in (flattened) %krun_args.
      my $cmd = "$KRUN " . (join ' ', (grep {$_} %krun_args));
      print $cmd . "\n" if defined $ENV{VERBOSE};
      system($cmd);

      # Print errors and/or results and exit.
      if (defined $ENV{PROFILE}) {
            my $profileDB = 'kccProfileDB.sqlite';
            print "Generating profile database $profileDB...\n";
            if (! -e $profileDB) {
                  copy(catfile($SCRIPTS_DIR, "kccProfileDB.calibration.sqlite"), 
                              $profileDB);
            }
            my $profileWrapper = catfile($SCRIPTS_DIR, 'analyzeProfile.pl');
            `perl $profileWrapper $fileOutput $PROGRAM_NAME`;
            return 0;
      } 

      if (defined $ENV{SEARCH} || defined $ENV{THREADSEARCH} || defined $ENV{UPSEARCH}) 
      {
            my $graphOutputFile = "kcc-search-results.dot";

            print "Generated $fileOutput\n" if defined $ENV{VERBOSE};
            print "Examining the output...\n" if defined $ENV{VERBOSE};
            my $graphOutput = graphSearch($graphOutputFile, $fileOutput);
            print "$graphOutput\n";
            print "Generated $graphOutputFile.\n";

            if (defined $ENV{GRAPH}) {
                  print "Generating graph...\n";
                  system("dot -Tps2 $graphOutputFile > kcc-search-results.ps") == 0 
                        or die "Running dot failed: $?\n";
                  print "Generated kcc-search-results.ps.\n";
                  system("ps2pdf kcc-search-results.ps kcc-search-results.pdf") == 0 
                        or die "Running ps2pdf failed: $?\n";
                  print "Generated kcc-search-results.pdf\n";
            }
            return 0;
      } 

      if (defined $ENV{LTLMC} | defined $ENV{DEBUG} | defined $ENV{UPLTLMC}) {
            return 0;
      }

      return processResult($fileOutput, defined $ENV{VERBOSE});
}

sub parseRawResultLine {
      my ($parsed) = (@_);

      /< k > (.*) <\/ k >/ && do {
            $parsed->{finalComp} = $1;
      };

      /< error-cell > # "(.*)"\(\.KList\) <\/ error-cell >/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /< curr-function > 'Identifier\(# "(.*)"\(\.KList\)\) <\/ curr-function >/ && do {
            $parsed->{errorFunc} = $1;
      };

      /< curr-program-loc > 'CabsLoc\(# "(.*)"\(\.KList\),,# (\d+).*<\/ curr-program-loc >/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /< final-computation > (.*) <\/ final-computation >/ && do {
            $parsed->{finalComp} = $1;
      };

      /< computation > (.*) <\/ computation >/ && do {
            $parsed->{finalCompGoto} = $1;
      };

      /< type > (.*) <\/ type >/ && do {
            $parsed->{finalCompType} = $1;
      };

      /< output > #buffer\(# "(.*)"\(\.KList\)\) <\/ output >/ && do {
            $parsed->{output} = $1;
      };

      /< done > (.*) <\/ done >/s && do {
	     push @{$parsed->{done}},$1;
      }; 

      /< update-line > 'CabsLoc\(# "(.*)"\(\.KList\),,# (\d+).*<\/ update-line >/ && do {
            $parsed->{updateLine} = $2;
      };

      /< result-value > 'tv\(# (-?\d+)\(\.KList\),,/ && do {
            $parsed->{exitCode} = $1;
      };
}

# TODO(chathhorn): We have two functions here because of the newlines -- the
# regexes below match against the whole file as opposed to a line at a time.
sub parseResult {
      my ($parsed) = (@_);

      /<k>(.*?)<\/k>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<error-cell>\s*"(.*)"\s*<\/error-cell>/ && do {
            $parsed->{haveError} = 1;
            my $output = $1;
            $output =~ s/\%/\%\%/g;
            $output =~ s/`/\\`/g;
            $output =~ s/\\\\/\\\\\\\\/g;
            $parsed->{errorMsg} = substr(`printf "x$output"`, 1);
      };

      /<curr-function>\s*(Identifier \( "(.*?)" \)|(file-scope))\s*<\/curr-function>/ && do {
            $parsed->{errorFunc} = $2;
      };

      /<curr-program-loc>\s*CabsLoc\s*\(\s*"(.*)"\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*<\/curr-program-loc>/ && do {
            $parsed->{errorFile} = $1;
            $parsed->{errorLine} = $2;
      };

      /<final-computation>(.*?)<\/final-computation>/s && do {
            $parsed->{finalComp} = $1;
      };

      /<computation>(.*?)<\/computation>/s && do {
            $parsed->{finalCompGoto} = $1;
      };

      /<type>(.*?)<\/type>/s && do {
            $parsed->{finalCompType} = $1;
      };

      /<output>\s*#buffer\s*\(\s*"(.*)"\s*\)\s*<\/output>/ && do {
            $parsed->{output} = $1;
      };

      /<result-value>\s*tv\s*\(\s*(-?\d+)\s*,/ && do {
            $parsed->{exitCode} = $1;
      };

      /< done > (.*) <\/ done >/s && do {
	     push @{$parsed->{done}},$1;
      }; 

      /<update-line>\s*CabsLoc\s*\(\s*"(.*)"\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*<\/update-line>/ && do {
            $parsed->{updateLine} = $2;
      };

      /<result-value>\s*tv\s*\(\s*NullPointer\s*,/ && do {
            $parsed->{exitCode} = 0;
      };
}

sub unindent {
      my ($str) = (@_);

      my @lines = split "\n", $str;

      for (@lines) {
            s/^\s+//;
      }

      return join "\n", @lines;
}

sub processResult {
      my ($fileOutput, $verbose) = (@_);
      my %parsed;

      open(OUT, "<$fileOutput");
      local $/;
      local $_ = <OUT>;
      print if $verbose;
      parseResult(\%parsed);

      if (defined $parsed{finalComp} || defined $parsed{finalCompType} 
                  || defined $parsed{errorMsg} || !defined $parsed{exitCode}) {
            print "\n=============================================================\n";
            print "ERROR! KCC encountered an error while executing this program.\n";

            if (defined $parsed{errorMsg}) {
                  print "=============================================================\n";
                  print "$parsed{errorMsg}\n";
            }

            print "=============================================================\n";
            print "File: $parsed{errorFile}\n" if defined $parsed{errorFile};
            print "Function: $parsed{errorFunc}\n" if defined $parsed{errorFunc};
            print "Line: $parsed{errorLine}\n" if defined $parsed{errorLine};

            if (defined $parsed{finalComp}) {
                  print "=============================================================\n";
                  print "Final Computation:\n";
                  print unindent(substr($parsed{finalComp}, 0, 1000));
                  print "\n";
            }

            if (defined $parsed{finalCompGoto}) {
                  print "=============================================================\n";
                  print "Final Goto Map Computation:\n";
                  print unindent(substr($parsed{finalCompGoto}, 0, 1000));
                  print "\n";
            }

            if (defined $parsed{finalCompType}) {
                  print "=============================================================\n";
                  print "Final Type Computation:\n";
                  print unindent(substr($parsed{finalCompType}, 0, 1000));
                  print "\n";
            }
      }
      return $parsed{exitCode} if defined $parsed{exitCode};
      return 1;
}

sub graphSearch {
      require GraphViz;

      my %states = (); # stateId => stateLabel
            my %arcs = (); # startArcId => endArcId => arcLabel
            my %errorStates = (); # stateId => errorKind
            my %goodFinal = (); # stateId => ""

            my ($outFilename, $inFilename) = (@_);
      my $retval = "";

      my $g = GraphViz->new();

# Literal braces, vertical bars and angle brackets must be escaped.

      my $state = "start";
      my $currentStateNumber;
      my $currentStateDestination;
      my $currentState = "";
      my $currentRule = "";
      my $currentRuleName;
      my @currentArc;

      my $seenMain = 0;

      my @solutions;

      open(IN, "<$inFilename");

      for (<IN>) {
            chomp;

            # handle start state
            if ($state eq "start") {
                  /^Solution (\d+) / && do {
                        $state = "solution";
                  };

                  /^No solution\./ && do {
                        $state = "state";
                  };
            }

            if ($state eq "solution") {
                  /^Solution (\d+) / && do {
                        my $numSolutions = $1;
                        push(@solutions, {});
                        $solutions[-1]->{'num'} = $numSolutions;
                  };

                  parseRawResultLine($solutions[-1]);

                  # keep reading (and throwing away) until we hit a state
                  /^state (\d+)/ && do {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                  };

                  next;
            }

            # handle state state
            if ($state eq "state") {
                  # keep reading until we hit an arc
                  if (/^arc (\d+) ===> state (\d+) \((c?rl) /) {
                        $state = "arc";
                        # meant to continue to next case
                  } elsif (/^state (\d+)/) {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                        next;
                  } else {
                        $currentState .= $_;
                        /"stdout"\(\.KList\) \|-> # "(.*)"\(\.KList\)/ && do {
                              my $currentOutput = $1;
                              $states{$currentStateNumber} = $currentOutput;
                        };

                        /< output > #buffer\(# "(.*)"\(\.KList\)\) <\/ output >/ && do {
                              my $currentOutput = $1;
                              $goodFinal{$currentStateNumber} = "";
                              $states{$currentStateNumber} = $currentOutput;
                        };

                        /< error-cell > (.*) <\/ error-cell >/ && do {
                              my $currentOutput = $1;
                              $errorStates{$currentStateNumber} = "";
                        };
                        next;
                  }
            }

            # handle arc state
            if ($state eq "arc") {
                  # keep reading until we hit a state or arc
                  if (/^state (\d+)/) {
                        $currentStateNumber = $1;
                        $states{$currentStateNumber} = "";
                        $state = "state";
                  } elsif (/^arc (\d+) ===> state (\d+) \((c?rl) /) {
                        my $arcNumber = $1;
                        $currentStateDestination = $2;
                        $currentRule = $3;
                        if ($seenMain) {
                              $arcs{$currentStateNumber}{$currentStateDestination} = "";
                        }
                        $state = "arc";
                        $currentRuleName = "";
                  } else {
                        $currentRule .= $_;

                        /label ([\w-]+).*\] \.\)$/ && do {
                              $currentRuleName = $1;
                              if ($currentRuleName eq "call-main") {
                                    %states = ();
                                    $seenMain = 1; 
                              }
                              if ($seenMain) {
                                    $arcs{$currentStateNumber}{$currentStateDestination} = $currentRuleName;
                              }
                        };

                        /metadata .*heating/ && do {
                              if (/freezer\("\(([^\)]+)\)\./) {
                                    $currentRuleName = $1;
                        }
                        $currentRuleName .= ' heat';
                        if ($seenMain) {
                              $arcs{$currentStateNumber}{$currentStateDestination} = $currentRuleName;
                        }
                        };
                  }
                  next;
            }
      }

      for my $node (keys %states) {
            my $attribs = getAttribs($node, \%errorStates, \%goodFinal);
            $attribs->{'label'} = "$node\n${states{$node}}";
            $g->add_node($node, %$attribs);
      }

      for my $from (keys %arcs) {
            for my $to (keys %{$arcs{$from}}) {
                  $g->add_edge($from => $to, label => $arcs{$from}{$to});
            }
      }

      open(DOTOUTPUT, ">$outFilename");
      print DOTOUTPUT $g->as_text;
      close(DOTOUTPUT);

      $retval .= "========================================================================\n";
      $retval .= scalar(@solutions) . " solutions found\n"; 
      for my $solution (@solutions) {

            $retval .= "------------------------------------------------------------------------\n";
            $retval .= "Solution $solution->{'num'}\n";
            if (defined $solution->{'exitCode'}) {
                  $retval .= "Program completed successfully\n"; 
                  $retval .= "Exit code: " . getString($solution->{'exitCode'}) . "\n";
            } else {
                  $retval .= "Program got stuck\n";
                  $retval .= "File: " . getString($solution->{'errorFile'}) . "\n";
                  $retval .= "Line: " . getString($solution->{'errorLine'}) . "\n";
            }
            if (defined $solution->{'errorMsg'}) {
                  $retval .= getString($solution->{'errorMsg'}) . "\n";
            }
	    $retval .= "Update at Line:" . getString($solution->{'updateLine'}) . "\n";
	    $retval .= "Output:\n";
	    my $donevalue ;
	    foreach $donevalue (@{$solution->{'done'}}){
	    $retval .=  $donevalue;
	    $retval .=  "\n";}
#           $retval .= "Output:\n" . getString($solution->{'output'}) . "\n";

      }
      $retval .= "========================================================================\n";
      $retval .= scalar(@solutions) . " solutions found\n"; 

      return $retval;
}

sub getAttribs {
      my ($nodeId, $errorStates, $goodFinal) = (@_);
      my $attribs = {};
      if (exists($errorStates->{$nodeId})) {
            $attribs->{"fillcolor"} = "red";
            $attribs->{"style"} = "filled";
      }
      if (exists($goodFinal->{$nodeId})) {
            $attribs->{"fillcolor"} = "green";
            $attribs->{"style"} = "filled";
      }
      return $attribs;
}

sub getString {
      my ($s) = (@_);

      return '' unless defined $s;

      $s =~ s/\%/\%\%/g;
      $s =~ s/\\\\/\\\\\\\\/g;
      return substr(`printf "x$s"`, 1);
}

sub interruptHandler {
      # Call single cleanup point.
      finalCleanup();
      kill 1, -$$;
      # Since we were interrupted, we should exit with a non-zero code.
      exit 1;
}

# This subroutine can be used as a way to ensure we clean up all resources
# whenever we exit. This is going to be mostly temp files. If the program
# terminates for almost any reason, this code will be executed.
sub finalCleanup {
      if (!defined $ENV{DUMPALL}) {
            for (@temporaryFiles) {
                  close $_;
                  unlink;
            }
      }
}

# This block gets run at the end of a normally terminating program, whether it
# simply exits, or dies. We use this to clean up.
END {
      # $? contains the value the program would normally have exited with.
      my $retval = $?;
      # Call single cleanup point.
      finalCleanup();
      exit $retval;
}

# The parsed file contents of the program to execute with krun gets appended.

sub linkedProgram {
return <<'PROGRAMCONF';
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

PROGRAMCONF
}
